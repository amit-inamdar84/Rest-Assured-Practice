Learning sequence:
Json Path (in this notes), Method chaining, Automate Get, Extract Response, Extract single field, Hamcrest methods and matchers (in this notes), Logging, Passing headers in request
, Extract and assert reponse headers, Request specification, Response specification, Automate POST, PUT and DELETE, Sending request payload,
Query and Path parameters, Multipart Form data, File upload and download, Form URL Encoding, JSON Schema validation, Filters, Serialization
and Deserialization, Jackson annotations, Authentication schemes, Gmail API, Form based auth, Handling cookies, Framework, Spotify API, Lombok,
Allure reports, Maven, Parallel execution, Github integration, Jenkins

Why is API required to communicate between front end and back end?
Because they speak different languages - Front end is developed in HTML, CSS, Javascript. Back end is developed in Java, Python etc.
Different tests and validations in API testing: 
a. Usually the validations are matching the schema, matching response with the request or with expected values. 
b. You may do full JSON body validation or partial validation based on the API. 
c. You could do positive as well as negative scenarios. 
d. You could simulate user journeys as well for example. one API calling another API and so on. 
e. It could be token expiry, invalid inputs, etc. Validating supported HTTP codes for e.g. 404, 503, 501, etc. 
f. Validating response headers.

Advantages of JSON:
Lightweight
Human readable
Easy to understand
Can be used with any language

Rest vs HTTP:
Rest is architecture and HTTP is protocol
Rest uses HTTP methods like GET, PUT etc.

JSON data types:
String
Boolean
Numeric
Object
Array
NULL

Fetching JSON data: (Parsing json file)
Groovy's Gpath
Jayway JSON path

Using Groovy's Gpath:
In groovy.json package we have a class called JsonSlurper that can parse json text into Groovy data structures such as Objects, maps, integers etc.
JsonSlurper jsonSlurper = new JsonSlurper();
jsonSlurper.parseText('{"name":"John Doe"}');

string in json is converted to java.lang.string
object is converted to java.util.LinkedHashMap
For more details go to groovy-lang.org/json.html

Next we use Gpath expressions for navigation inside json data structure. GPath use a dot-object notation to perform object navigation.
http://groovyconsole.appspot.com/
https://www.jdoodle.com/execute-groovy-online/
https://onecompiler.com/groovy

jsonSlurper.parseText returns an object. On this object we can use: object.firstname; object.address; object.address.street
Paste below code in Groovy playground (https://groovyconsole.appspot.com/) to query the json.
​import groovy.json.JsonSlurper
def object = new JsonSlurper().parseText(
'''
{
 "address":{
  "street": "ABC"
 }
}
'''
)

def query = object
println query

object.address.street
--------------------------------------------------------------------------------------------
Using Jayway's Json Path:
Functions like min(), max() not working. Need to check this and practice json path writing later.
Need to add as a dependency - json-path
It also uses dot notation.
Official doc: https://github.com/json-path/JsonPath
Operators and functions are important here.
Use jsonpath.com to test syntax
Some examples : https://goessner.net/articles/JsonPath/index.html#e2

XPath	JSONPath	Description
/	$	        the root object/element
.	@	        the current object/element
/	. or []	    child operator
..	n/a	        parent operator
//	..	        recursive descent. JSONPath borrows this syntax from E4X.
*	*	        wildcard. All objects/elements regardless their names.
@	n/a	        attribute access. JSON structures don't have attributes.
[]	[]	        subscript operator. XPath uses it to iterate over element collections and for predicates. In Javascript and JSON it is the native array operator.
|	[,]	        Union operator in XPath results in a combination of node sets. JSONPath allows alternate names or array indices as a set.
n/a	[start:end:step]	array slice operator borrowed from ES4.
[]	?()	       applies a filter (script) expression.
n/a	()	       script expression, using the underlying script engine.
()	n/a	       grouping in Xpath

{ "store": {
    "book": [ 
      { "category": "reference",
        "author": "Nigel Rees",
        "title": "Sayings of the Century",
        "price": 8.95
      },
      { "category": "fiction",
        "author": "Evelyn Waugh",
        "title": "Sword of Honour",
        "price": 12.99
      },
      { "category": "fiction",
        "author": "Herman Melville",
        "title": "Moby Dick",
        "isbn": "0-553-21311-3",
        "price": 8.99
      },
      { "category": "fiction",
        "author": "J. R. R. Tolkien",
        "title": "The Lord of the Rings",
        "isbn": "0-395-19395-8",
        "price": 22.99
      }
    ],
    "bicycle": {
      "color": "red",
      "price": 19.95
    }
  }
}

XPath	                JSONPath	                Result
/store/book/author	 $.store.book[*].author	  the authors of all books in the store
//author	         $..author	                      all authors
/store/*	         $.store.*	                      all things in store, which are some books and a red bicycle.
/store//price	     $.store..price	              the price of everything in the store.
//book[3]	         $..book[2]	                        the third book
//book[last()]	     $..book[(@.length-1)]
                     $..book[-1:]	               the last book in order.
//book[position()<3]	$..book[0,1]
                        $..book[:2]	             the first two books
//book[isbn]	     $..book[?(@.isbn)]	             filter all books with isbn number
//book[price<10]	 $..book[?(@.price<10)]	     filter all books cheapier than 10
//*	                      $..*	                 all Elements in XML document. All members of JSON structure.
---Need to practice more----
Groovy vs Jayway Jpath:
Groovy is transitive dependency. JPath needs to be expliclity added as dependency
Syntax is different.

HTTP methods:
Refer HTTP Methods.png and StatusCodes.png
GET, POST, PUT, PATCH, DELETE etc are HTTP methods and not Rest assured methods.
Most of them are defined under RFC 7231 specifications. Only PATCH is defined under RFC 5789.
 
Idempotent means executing the same HTTP method repeatedly will not having effect on the server. i.e., Executing GET many times will not change anything on server. But sending POST request repeatedly (with same data) will either result in error or new resource being created.
We use HEAD method when the GET�s response is huge and we want to only check the resource size or existence. Mainly for testing purposes. This will actually avoid hitting server unnecessarily. The header we receive in response will be the same headers which we receive in a GET request.
OPTIONS request is used to get the HTTP methods supported by a resource. In the response go to headers sections and check the header � Access-Control-Allow-Methods. It will list all the methods supported. Also, Access-Control-Allow-Headers will show the content type supported by the resource.

HTTP status codes: 
  1xx (Informational): The request was received, continuing process
   2xx (Successful): The request was successfully received,
      understood, and accepted
   3xx (Redirection): Further action needs to be taken in order to
      complete the request
   4xx (Client Error): The request contains bad syntax or cannot be
      fulfilled
      400: Bad request - Bad syntax - When password is not provided.
      401: Unauthorized - Authentication error
      
      404: Requested resource not found
   5xx (Server Error): The server failed to fulfill an apparently
      valid request
      500: Internal server error
      502: Bad Gateway status code indicates that the server, while
   acting as a gateway or proxy, received an invalid response from an
   inbound server it accessed while attempting to fulfill the request.
      503: (Service Unavailable) status code indicates that the server
   is currently unable to handle the request due to a temporary overload
   or scheduled maintenance
More info: https://datatracker.ietf.org/doc/html/rfc7231#section-6

Mock server:
Mock server helps to send mock HTTP requests when backend is not ready and we need to test API�s. Instead of backend we can set up a mock server and hit it to test API�s.
In postman create a mock server (copy the mock server URL after creation) and create a collection. Create a request under collection using mock server URL copied earlier and put /get as end point.
Now we have created an API which needs to be tested without a backend. So, we define the expected response in the mock server and send test API request. It should get response as we defined earlier. To achieve this, in postman, within the request click on examples. Create a new example and edit the response body and write the response that we need. i.e., expected response. Also set the expected HTTP status code.
Now go back to request and hit the mock server. The response body and status code should match the expected response we defined in previous step. The API spec helps us to know the below things:
1.	URL and endpoint of the API that is under test.
2.	Expected response.
We can use the above info of API spec to set up the mock server with expected response.
Note: If for same API end point if you want to test different status codes and response, then define those examples for the same API (Define expected status code and response body). Now add a header in the API request called � x-mock-response-code and add required status code value to it. Now the mock server will respond as per what we defined in the header for the same API request.
To mock header request and responses, add these custom headers in mock request
1. header : value1 (This header value will determine which mock example's response is expected)
2. x-mock-match-request-headers : header (Value of this header should be the header name defined in previous step) 
Now define two examples where we need to set header : value 1 and header : value2
Define response body that is to be sent to calling request. Also define custom response header.
When mock request is sent verify the response body and header. They should match the headers defined in example 1 or 2. 

Rest assured:
It is a java library that can be used to automate Rest API's
Install eclipse, create new maven project and install rest assured and TestNG dependencies. Also install TestNG plugin.
We can use static imports for readability. i.e. to avoid RestAssured.given() and only use given() for BDD like syntax. Also avoids code duplication.
(Refer MethodChaining.java)
In test case file include static imports:
import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
1 right click on your project 2 click on build path 3 click on configure build path 4 click on add library 5 select TestNG 6 click on next 7 click on finish 8 click on apply and close
This will add TestNG library to your project

Hamcrest: (API Doc: http://hamcrest.org/JavaHamcrest/javadoc/)
-> Hamcrest is a well known assertion library used for unit testing along with JUnit.
-> Hamcrest can be used along with Rest Assured for assertions.
-> Uses matcher classes for making assertions

Adv:
-> Human readable and in plain english
-> Code is neat and intuitive
-> Provides thin methods like "is" and "not", also called as decorators, for more readibility

Hamcrest Vs TestNG
-> Readibility
-> Descriptive error messages
-> Type Safety

Collection matchers (List, Array, Map, etc.) - Need to practice
==============================================
hasItem() -> check single element in a collection
not(hasItem()) -> check single element is NOT in a collection
hasItems() -> Check all elements are in a collection
contains() -> Check all elements are in a collection and in a strict order
containsInAnyOrder() -> Check all elements are in a collection and in any order
empty() -> Check if collection is empty
not(emptyArray()) -> Check if the Array is not empty
hasSize() -> Check size of a collection
everyItem(startsWith()) -> Check if every item in a collection starts with specified string

hasKey() -> Map -> Check if Map has the specified key [value is not checked]
hasValue() -> Map -> Check if Map has at least one key matching specified value
hasEntry() -> Maps -> Check if Map has the specified key value pair
equalTo(Collections.EMPTY_MAP) -> Maps [Check if empty]
allOf() -> Matches if all matchers matches (Works only with strings)
anyOf() -> Matches if any of the matchers matches (Works only with strings)

Numbers:
greaterThanOrEqualTo()
lessThan()
lessThanOrEqualTo()

String:
containsString()
emptyString()

DefaultReqAndRespSpec.java

Ways to send payload: refers AutomatePost.java
String varible
JSON Object (Not taught in this course)
Using Json file
Using Hash Map
Using POJO's

Postman Echo:
Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for GET, POST, PUT, various auth mechanisms and other utility endpoints.
The documentation for the endpoints as well as example responses can be found at https://postman-echo.com

Multipart form data:
For POST or PUT request we can send form data as request body. Data is sent in parts to server.
When sending larger amount of data to the server it's common to use the multipart form data technique. 
Rest Assured provide methods called multiPart that allows you to specify a file, byte-array, input stream or text to upload. 
In its simplest form you can upload a file like this:
given().
        multiPart(new File("/path/to/file")).
when().
        post("/upload");

JSON Schema: json-schema.org
It helps to describe your data format in JSON file.
Json tool : jsonschema.net/home
Rest assured doc on Schema validation: https://github.com/rest-assured/rest-assured/wiki/Usage#json-schema-validation
Need to add Maven dependency: json-schema-validator

Serialization is the process of converting Java object to byte stream. (Ex: Converting Hashmap or Arraylist to json payload in POST.)
Deserialization is the process of converting byte stream into Java object.(Ex: Converting response to POJO class)
We convert to byte stream because it is independent of platform/language. Java object is specific to Java language.
Object Mapping: REST Assured supports mapping Java objects to and from JSON and XML. 
For JSON you need to have either Jackson, Jackson2, Gson or Johnzon in the classpath and for XML you need JAXB.
We have to add the above libraries as Maven dependency.
Rest assured supports content type based serialization. 
REST Assured will serialize the object to JSON if the request content-type is set to "application/json". 
It will first try to use Jackson if found in classpath and if not Gson will be used. 
If you change the content-type to "application/xml" REST Assured will serialize to XML using JAXB. 
If no content-type is defined REST Assured will try to serialize in the following order:
JSON using Jackson 2 (Faster Jackson (databind))
JSON using Jackson (databind)
JSON using Gson
JSON using Johnzon
JSON-B using Eclipse Yasson
XML using JAXB

Rest assured can also serialize Hashmap and List to JSON.
If you have multiple object mappers in the classpath at the same time or don't care about setting the content-type you can specify a 
serializer explicity - Refer: https://github.com/rest-assured/rest-assured/wiki/Usage#using-an-explicit-serializer
It also supports content type deserialization and custom Content-Type Deserialization.
Custom Content-Type Deserialization: Refer: https://github.com/rest-assured/rest-assured/wiki/Usage#custom-content-type-deserialization

Rest assured can perform Serialization and Deserialization under the hood. If we need to do it outside rest assured (only in some cases might be required), 
need to use jackson-databind maven dependency.

POJO is used to represent the request and response as Java objects. Doing this with JSON/XML will be challenging.
It is like a blueprint which can reused for all instances of data. Ex: Employee can be object and role, salary etc can be passed and retrieved.
Advantages of POJO:
Readability - By looking at POJO class we can understand, what object it represents
Reusability - We can reuse the class for multiple objects.
Easy access to data - Since we have Java objects we can easliy access data compared to JSON objects.
Type safety - If we pass wrong data type to POJO constructor, it gives compile time error.
Supports Serialization and Deserialization

Disadvantage:
Lot of POJO classes need to be created for objects. Maintenance is difficult. Solution is to use Lombok which reduces code.

Authentication is confirming the identity and authorization is restriction to perform operations.
Login username and password are authentication.
After login what modules user has access to is authorization.
In API testing we generally use the term authorization instead of authentication. This is because API will provide user the authorization to access a 
resource after authenticating the user.

Type of Authentications:
-Basic - Base 64 encoded username:password is sent in header called Authorization. When the HTTP request is sent to server, 
it decodes the string and provides access. Base64 encoding is not secure as credentials are sent as clear text.
-Digest - Based on challenge - response. Client sends request to server without username and password. Server challenges client by sending some parameters
like Realm, Nonce etc. Client uses these parameters, encrypts username and pass using MD5 algorithm and sends to server. 
-Bearer - When client sends username and pass, server sends bearer token. This token can be used for subsequent HTTP requests for authorizing API's
The token can be specified as a value of header called Authorization.
-API Key -   Generated during first time login or signup. It is safe because we can delete and regenerate a new one. Passed as header.
-Form - Contains a form with username and password and submit button.

-OAuth - Used for authorization. Not for authentication (For this we use Open ID connect). OAuth solves the problem of delegated authorization.
Open ID connect is a layer built on top of OAuth and provides identity services.
OAuth terminologies: Resource owner, resource, client, resource server, Authorization server.
Authorization server is responsible to issue access token to client app.
Delegated authorization example: Allow stackoverflow to use Google credentials to login to stack overflow. Here the authorization is delegated
to Google by Stack overflow.
If an app/website is allowing user to login using Google/facebook account, it is using open ID connect for authentication
If an app/website after login, allows user to redirect to Google/Facebook for some services, it is using OAuth for authorization. We can see
OAuth in URL while redirecting. Ex: Allow a website to use your existing photos in Google pohotos to use for editing, framing etc.

Authorization grant flow and implicit grant flow are 2 types of Oauth flows. Difference is in implicit grant flow where there is not Auth code
sent from Authorization server back to client server. Only access token is sent. No refresh token also
In Authorization grant flow, authorization server issues auth code, access token and refresh token to client app.
Client credentials flow - Only services involved here. No users. Best fit for Microservices.
Image for above flows - src/main/resources/screenshots

---Gmail API Example----Authorization grant flow - Used in web applications.
1. Create Gmail account.
2. Go to Google API console and set up dummy client app
3. Enable Gmail API's for client app
4. Create client credentials and user consent screen
5. Authorize client app and fetch auth code
6. Exchange auth code for access token and refresh token.
7. Fetch user profile using Gmail API and access token.
8. Refresh access token using refresh token.
9. Send email using Gmail API and access token.

In OAuth 2.0, the amount of access the user grants to the client application is determined by scope.
In OAuth 2.0, the access token type is usually the Bearer token
In OAuth 2.0 authorization code grant flow, in order to renew the access token, the value of grant_type is set to refresh_token

Google OAuth documentation: developers.google.com/identity/protocols/oauth2
In above page go to https://console.developers.google.com/ link for Google API Console and create a new project.
Go to library menu and enable Gmail API after searching.
Go back to Dashboard and create consent screen. Select external radio button and fill the app info form.
Now select the scopes for Gmail API to read email address profile and compose email.
Too many steps. Watch video for further steps to set up client credentials.
Client app dummy URL: https://localhost:8080
Client ID and client secret store in local as it is sensitive info.
Watch video 154 onwards for details to set up client application in Google(https://developers.google.com/identity/protocols/oauth2/web-server)
and build endpoint from Google and postman(build api and query parameters - video 157), send request from
client app to Gmail to compose email, access personal info etc.
After logging in using Gmail credentials, the URL will contain and Auth code which is short lived. Use this auth code to get access token
Again refer to Google OAuth page(Step 5 in https://developers.google.com/identity/protocols/oauth2/web-server) to get post request in which we
will send auth code.
In response we get access token and refresh token. Even if access token  expires, refresh token can be used to get new access token. No need to login
flow again. But user session must active.
Need to send a POST request again with one of the query parameters being refresh_token
Gmail API page: https://developers.google.com/gmail/api/reference/rest
Base64 encoding::
https://ostermiller.org/calc/encode.html

------------Gmail Example------Implicit grant flow--------
https://developers.google.com/identity/protocols/oauth2/javascript-implicit-flow
Step 2 in above URL
Here the difference is in the initial auth request we use query parameter - response_type=token instead of code.
After hitting the URL we get token directly in URL and can use it in further requests.
------------------------------------
Open ID connect flow:
Client authenticates using ID token which is issued by Auth server (Google)
API for authentication using Open ID connect: https://accounts.google.com/o/oauth2/v2/auth
The scope query parameter for above API uses openid email which is the differentiation that this request is for authentication
https://auth0.com/docs/secure/tokens/json-web-tokens
JSON web token (JWT), pronounced "jot", is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.
Structure:
Header: Includes the type of the token and the signing algorithm
Payload: Includes claims. Claims are the statements about an identity that can be used by the server for validation purposes
Signature: Used to verify the token is not compromised/is not changed. Additionally, if the token is signed with a private key, the server can verify the sender of the token.
-JWTs can be used in various ways:
Authentication: When a user successfully logs in using their credentials, an ID token is returned. According to the OpenID Connect (OIDC) specs, an ID token is always a JWT.
Authorization: Once a user is successfully logged in, an application may request to access routes, services, or resources (e.g., APIs) on behalf of that user. To do so, in every request, it must pass an Access Token, which may be in the form of a JWT. Single Sign-on (SSO) widely uses JWT because of the small overhead of the format, and its ability to easily be used across different domains.
Information Exchange: JWTs are a good way of securely transmitting information between parties because they can be signed, which means you can be sure that the senders are who they say they are. Additionally, the structure of a JWT allows you to verify that the content hasn't been tampered with.

Rest assured automation of above flows:
Cannot automate authorization to get auth code. Because we need to use browser to enter credentials.
Will start with automating get user profile and then sending email.
----------------------------------------------------------------------------------------
Session based authentication:
Oauth uses token based auth. Here no browser or user session is maintained. Works only if token is not expired.
Session maintained by server.
Session based authentication can work only for a single domain while the token based authentication can work across multiple domains
A web app can be designed to use both session based and token based auth.
Refer image in screenshots folder
Diff between session based auth and token based auth: Refer video 166
---------------------------------------------------------------------------------------
-----------------------------------------------------------
CSRF token: FormAuthentication.java
------------------------------------------------------------
Demo app setup:
mvnw.cmd clean install
Path: D:\Demo App\RomanianCoderExamples-master\SpringBootSecurity\Forms\target
Command: java -jar springboot-security-forms-0.0.1-SNAPSHOT.jar
After setup, we will use Rest assured to automate login and fetch session id and use the same for subsequent requests.
Form based auth: FormAuthentication.java 
---------------------------------------------------------------
Cookies: Also called HTTP cookie, browser cookie or internet cookie.
Cookie is a small piece of data stored in browser storage.
SendCookies.java
Video - 175
Refer screenshot
---------------------------------------------------------
Automate spotify API's using framework:https://developer.spotify.com/documentation/web-api/
Create a client app, note client ID and secret
Base URI: https://accounts.spotify.com
Add redirect URI in client app settings
Prepare API request in post man using: https://developer.spotify.com/documentation/general/guides/authorization/code-flow/
Paste in postman and edit query parameters where required.
Run the API in browser to get code.
This code is short lived. Need to run the autorize API again to get new auth code.
Now we can use this code to get access and refresh token
If access token expires, we can use refresh token to regenerate access token.
Base URI of web API: https://api.spotify.com













